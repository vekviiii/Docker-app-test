pipeline {
    agent any
    stages {
        stage('Cleanup') {
            steps {
                sh '''
                echo "Cleaning up stopped containers..."
                docker container prune -f

                echo "Cleaning up dangling images..."
                docker image prune -f
                '''
            }
        }

        stage('Cleanup Images') {
            steps {
                sh '''
                echo "Removing dangling images..."
                docker image prune -f

                echo "Removing untagged images..."
                docker images -f "dangling=true" -q | xargs -r docker rmi

                echo "Removing older versions of my-react:dev except latest..."
                IMAGE_IDS=$(docker images my-react:dev --format "{{.ID}}" | tail -n +2)
                if [ "$IMAGE_IDS" ]; then
                echo "$IMAGE_IDS" | xargs -r docker rmi
                fi
                '''
            }
        }

        stage('Build') {
            steps {
                dir('client') {
                    sh 'docker build --rm --force-rm -t my-react:dev .'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'docker run --rm my-react:dev npm run test'
            }
        }

        stage('Deploy') {
            steps {
                sh '''
                CONTAINER_NAME=my-react
                PORT=5173

                # Find and kill any container using the same port
                CONFLICTING=$(docker ps --format '{{.ID}} {{.Ports}}' | grep ":${PORT}->" | awk '{print $1}')
                if [ "$CONFLICTING" ]; then
                    echo "Killing container(s) using port $PORT: $CONFLICTING"
                    docker rm -f $CONFLICTING
                fi

                # Remove existing container by name if it still exists
                if [ "$(docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then
                    echo "Removing old container named $CONTAINER_NAME"
                    docker rm -f $CONTAINER_NAME
                fi

                echo "Running new container..."
                docker run -d --name $CONTAINER_NAME -p ${PORT}:${PORT} my-react:dev
                '''
            }
        }
    }
}